@page "/postDetails/{PostId:int}"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Net.Http.Json
@using System.Text.Json

<h3>Post Details</h3>

@if (isLoading)
{
    <p>Loading post...</p>
}
else if (post == null)
{
    <p style="color: red;">@errorMessage</p>
}
else
{
    <div>
        <h4>@post.Content</h4>
        @if (!string.IsNullOrEmpty(post.ImageUrl))
        {
            <img src="@post.ImageUrl" alt="Post Image" width="300" />
        }
        <p><strong>Created At:</strong> @post.CreatedAt.ToString("g")</p>

        <h5>Comments:</h5>
        @if (post.Comments != null && post.Comments.Any())
        {
            <ul>
                @foreach (var comment in post.Comments)
                {
                    <li>
                        <strong>@(comment.User?.Username ?? "Unknown User")</strong> (@comment.CreatedAt.ToString("g")): @comment.Content
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No comments available.</p>
        }

        <h5>Likes:</h5>
        @if (post.Likes != null && post.Likes.Any())
        {
            <ul>
                @foreach (var like in post.Likes)
                {
                    <li>@(like.User?.Username ?? "Unknown User")</li>
                }
            </ul>
        }
        else
        {
            <p>No likes available.</p>
        }
    </div>
}

@code {
    [Parameter] public int PostId { get; set; }
    private PostDto post;
    private string errorMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadPost();
    }

    private async Task LoadPost()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Authorization token not found. Please sign in.";
                isLoading = false; // Dodane
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync($"http://post-api:5134/Post/{PostId}");

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine(errorMessage);
                isLoading = false; // Dodane
                return;
            }

            var responseString = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Post API Response: {responseString}");

            var jsonDoc = JsonDocument.Parse(responseString);
            var root = jsonDoc.RootElement;

            if (root.TryGetProperty("post", out var postElement))
            {
                post = JsonSerializer.Deserialize<PostDto>(postElement.GetRawText(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (post != null)
                {
                    Console.WriteLine($"Post Loaded: {post.Content}");
                    await LoadUsersForCommentsAndLikes();
                    isLoading = false; // Dodane
                    StateHasChanged();
                }
                else
                {
                    errorMessage = "Błąd deserializacji posta.";
                    Console.WriteLine(errorMessage);
                    isLoading = false; // Dodane
                }
            }
            else
            {
                errorMessage = "Brak obiektu 'post' w odpowiedzi API.";
                Console.WriteLine(errorMessage);
                isLoading = false; // Dodane
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd: {ex.Message}";
            Console.WriteLine(errorMessage);
            isLoading = false; // Dodane
        }
    }

    private async Task LoadUsersForCommentsAndLikes()
    {
        try
        {

            if (post?.Comments != null)
            {
                foreach (var comment in post.Comments)
                {
                    var userResponse = await Http.GetAsync($"http://identity-api:8001/User/{comment.User.Id}");
                    if (userResponse.IsSuccessStatusCode)
                    {
                        comment.User = await userResponse.Content.ReadFromJsonAsync<UserDto>();
                    }
                }
            }

            if (post?.Likes != null)
            {
                foreach (var like in post.Likes)
                {
                    var userResponse = await Http.GetAsync($"http://identity-api:8001/User/{like.UserId}");
                    if (userResponse.IsSuccessStatusCode)
                    {
                        like.User = await userResponse.Content.ReadFromJsonAsync<UserDto>();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd podczas pobierania danych o użytkownikach: {ex.Message}";
        }
    }

    private class PostDto
    {
        public int Id { get; set; }
        public string Content { get; set; }
        public DateTime CreatedAt { get; set; }
        public string ImageUrl { get; set; }
        public List<CommentDto> Comments { get; set; } = new();
        public List<LikeDto> Likes { get; set; } = new();
    }

    private class CommentDto
    {
        public int Id { get; set; }
        public string Content { get; set; }
        public DateTime CreatedAt { get; set; }
        public UserDto User { get; set; } = new();
    }

    private class LikeDto
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public DateTime CreatedAt { get; set; }
        public UserDto User { get; set; } = new();
    }

    public class UserDto
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
    }
}
