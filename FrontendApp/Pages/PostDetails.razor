@page "/postDetails/{PostId:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Szczegóły posta</h3>

@if (IsLoading)
{
    <p>Ładowanie danych...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else if (Post != null)
{
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">Post ID: @Post.Id</h5>
            <p class="card-text">@Post.Content</p>
            <small class="text-muted">Utworzono: @Post.CreatedAt.ToString("g")</small>

            @if (!string.IsNullOrEmpty(Post.ImageUrl))
            {
                <div class="mt-3">
                    <img src="@Post.ImageUrl" alt="Obrazek posta" class="img-fluid rounded" />
                </div>
            }

            <hr />

            <div>
                <strong>Liczba polubień:</strong> @(Post.Likes?.Count ?? 0)
                <br />
                <strong>Komentarze:</strong>
                @if (Post.Comments?.Any() ?? false)
                {
                    <ul>
                        @foreach (var comment in Post.Comments)
                        {
                            <li>
                                <strong>Autor:</strong> @(comment.User?.Username ?? "Nieznany użytkownik")<br />
                                @comment.Content<br />
                                <small class="text-muted">@comment.CreatedAt.ToString("g")</small>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>Brak komentarzy.</p>
                }
            </div>
        </div>
    </div>
}
else
{
    <p>Nie znaleziono posta.</p>
}

@code {
    [Parameter] public int PostId { get; set; }
    private PostDto Post;
    private string ErrorMessage;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        try
        {
            // Pobierz token z localStorage
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (string.IsNullOrEmpty(token))
            {
                ErrorMessage = "Nie znaleziono tokenu autoryzacyjnego. Proszę się zalogować.";
                return;
            }

            // Dodaj token do nagłówka HTTP w żądaniu
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Pobierz posty z API
            Post = await Http.GetFromJsonAsync<PostDto>($"http://localhost:5134/Post/{PostId}");
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = $"Błąd podczas pobierania danych z API: {ex.Message}";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Wystąpił nieoczekiwany błąd: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private class PostDto
    {
        public int Id { get; set; }
        public string Content { get; set; }
        public DateTime CreatedAt { get; set; }
        public string ImageUrl { get; set; }
        public List<CommentDto> Comments { get; set; } = new List<CommentDto>();
        public List<LikeDto> Likes { get; set; } = new List<LikeDto>();
    }

    private class CommentDto
    {
        public int Id { get; set; }
        public string Content { get; set; }
        public DateTime CreatedAt { get; set; }
        public UserDto User { get; set; }
    }

    private class LikeDto
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class UserDto
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
    }
}
