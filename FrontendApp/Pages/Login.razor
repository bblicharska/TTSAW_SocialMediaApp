@page "/login"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Forms

@if (isLoggedIn)
{
    <h3>You're already logged in</h3>
    <button class="btn btn-secondary" @onclick="LogoutUser">Log out</button>
}
else
{
    <h3>Sign in</h3>

    <EditForm Model="@loginUserDto" OnValidSubmit="LoginUser" FormName="LoginForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="Username">Username or e-mail:</label>
            <InputText id="Username" class="form-control" @bind-Value="loginUserDto.UsernameOrEmail" Placeholder="Username or E-mail" />
        </div>

        <div class="form-group">
            <label for="Password">Password:</label>
            <InputText id="Password" type="password" class="form-control" @bind-Value="loginUserDto.Password" Placeholder="Password" />
        </div>

        <button type="submit" class="btn btn-primary">Sign in</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <p style="color: green;">@successMessage</p>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p style="color: red;">@errorMessage</p>
    }
}

@code {
    private LoginUserDto loginUserDto = new LoginUserDto();
    private string? successMessage;
    private string? errorMessage;
    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        // Check if the user is already logged in
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        isLoggedIn = !string.IsNullOrEmpty(token);
    }

    private async Task<bool> ValidateTokenAsync(string token)
    {
        try
        {
            // Example: You can decode and validate the token locally or make an API call to verify it
            var response = await Http.GetAsync("http://identity-api:8001/User/validate-token");
            return response.IsSuccessStatusCode;
        }
        catch
        {
            return false;
        }
    }

    private async Task LoginUser()
    {
        errorMessage = null;
        successMessage = null;

        var response = await Http.PostAsJsonAsync("http://identity-api:8001/User/login", loginUserDto);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<TokenDto>();
            successMessage = "Login successful.";

            if (result != null && !string.IsNullOrEmpty(result.AccessToken))
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.AccessToken);
                isLoggedIn = true; // Update the state to reflect the login
            }
        }
        else
        {
            errorMessage = "Login failed. Please try again.";
        }
    }

    private async Task LogoutUser()
    {
        // Remove token from localStorage
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
        isLoggedIn = false; // Update the state to reflect the logout
        successMessage = null;
        errorMessage = null;
    }

    private class LoginUserDto
    {
        public string UsernameOrEmail { get; set; }
        public string Password { get; set; }
    }

    public class TokenDto
    {
        public string AccessToken { get; set; }
        public DateTime ExpiresAt { get; set; }
    }
}
